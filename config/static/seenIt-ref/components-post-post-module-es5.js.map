{"version":3,"sources":["webpack:///src/app/components/comment/comment-create/comment-create.component.ts","webpack:///src/app/components/comment/comment-create/comment-create.component.html","webpack:///src/app/components/comment/comment-info/comment-info.component.ts","webpack:///src/app/components/comment/comment-info/comment-info.component.html","webpack:///src/app/components/post/post-create/post-create.component.ts","webpack:///src/app/components/post/post-create/post-create.component.html","webpack:///src/app/components/post/post-details/post-details.component.ts","webpack:///src/app/components/post/post-details/post-details.component.html","webpack:///src/app/components/post/post-edit/post-edit.component.ts","webpack:///src/app/components/post/post-edit/post-edit.component.html","webpack:///src/app/components/post/post-info/post-info.component.ts","webpack:///src/app/components/post/post-info/post-info.component.html","webpack:///src/app/components/post/post-list/post-list.component.ts","webpack:///src/app/components/post/post-list/post-list.component.html","webpack:///src/app/components/post/post-routing.module.ts","webpack:///src/app/components/post/post.module.ts","webpack:///src/app/core/resolvers/single-post.resolver.ts"],"names":["CommentCreateComponent","store","postCommentEmitter","body","createCommentForm","value","postId","author","username","localStorage","getItem","select","subscribe","emit","reset","postComment","selector","templateUrl","styleUrls","CommentInfoComponent","deleteCommentEmitter","id","commentInfo","authorName","PostCreateComponent","createPostForm","userId","creatorPostId","dispatch","createPost","PostDetailsComponent","route","toastr","commentErrorMsg$","snapshot","params","post","data","comments$","message","showToasterMsg","errMsg","error","loadComments","deletePost","PostEditComponent","postService","getById","editPostForm","PostInfoComponent","deletePostEmitter","PostListComponent","url","segmentArr","segment","allPosts$","postRoutes","path","component","isLogged","resolve","PostRoutingModule","forChild","imports","exports","PostModule","declarations","SinglePostResolver","state","providedIn"],"mappings":"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","file":"components-post-post-module-es5.js","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { CommentInfo } from '../../shared/models/comment-info';\nimport { Store } from '@ngrx/store';\nimport { IAppState, getAuthUsername } from '../../../+store';\n\n@Component({\n  selector: 'app-comment-create',\n  templateUrl: './comment-create.component.html',\n  styleUrls: ['./comment-create.component.css']\n})\nexport class CommentCreateComponent {\n  @ViewChild('f') createCommentForm: NgForm;\n  @Input() postId: string;\n  @Output() postCommentEmitter = new EventEmitter<CommentInfo>();\n  username: string;\n\n  constructor(private store: Store<IAppState>) { }\n\n  postComment() {\n    const body = this.createCommentForm.value;\n    body.postId = this.postId;\n    body.author = this.username ? this.username : localStorage.getItem('username');\n    this.store.select(getAuthUsername).subscribe((username) => {\n      this.username = username;\n      // if (!username) { body.author = localStorage.getItem('username'); }\n      // body.author = username;\n    });\n\n    this.postCommentEmitter.emit(body);\n    this.createCommentForm.reset();\n  }\n}\n\n","<form #f=\"ngForm\" (ngSubmit)=\"postComment()\" id=\"commentForm\">\n  <label>Comment</label>\n  <textarea required ngModel name=\"content\" type=\"text\" cols=\"30\" rows=\"10\"></textarea>\n  <input type=\"submit\" [disabled]=\"f.invalid\" value=\"Add Comment\" id=\"btnPostComment\">\n</form>\n\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  Output\n} from '@angular/core';\nimport { CommentInfo } from '../../shared/models/comment-info';\nimport { IAppState, getAuthUsername } from '../../../+store';\nimport { Store } from '@ngrx/store';\n\n@Component({\n  selector: 'app-comment-info',\n  templateUrl: './comment-info.component.html',\n  styleUrls: ['./comment-info.component.css']\n})\nexport class CommentInfoComponent {\n  @Input() commentInfo: CommentInfo;\n  @Output() deleteCommentEmitter = new EventEmitter<string>();\n  authorName: string;\n\n  constructor(private store: Store<IAppState>) { }\n\n  deleteComment(id: string) {\n    this.deleteCommentEmitter.emit(id);\n  }\n\n  isAuthor(commentInfo: CommentInfo) {\n    this.store.select(getAuthUsername).subscribe((username) => {\n      if (username) { this.authorName = username; }\n      this.authorName = localStorage.getItem('username');\n    });\n    // return commentInfo.author === localStorage.getItem('username');\n    return commentInfo.author === this.authorName;\n  }\n}\n","<article class=\"post post-content\">\n  <p>{{commentInfo['content']}}</p>\n  <div class=\"info\">\n    submitted by {{commentInfo['author']}} |\n    <button *ngIf=\"isAuthor(commentInfo)\" (click)=\"deleteComment(commentInfo['_id'])\" class=\"deleteLink\">delete</button>\n  </div>\n</article>\n","import { Component, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { getAuthUserId, getAuthUsername, IAppState } from '../../../+store';\nimport * as PostsActions from '../../../+store/posts/actions';\n\n@Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.css']\n})\nexport class PostCreateComponent {\n  @ViewChild('f') createPostForm: NgForm;\n\n  constructor(private store: Store<IAppState>) { }\n\n  createPost() {\n    const body = this.createPostForm.value;\n    // body.author = localStorage.getItem('username');\n    this.store.select(getAuthUsername).subscribe((username) => {\n      body.author = username;\n    });\n    this.store.select(getAuthUserId).subscribe((userId) => {\n      body.creatorPostId = userId;\n    });\n\n    this.store.dispatch(PostsActions.createPost({ body }));\n  }\n}\n","<section id=\"viewSubmit\">\n  <div class=\"submitArea\">\n    <h1>Submit Link</h1>\n    <p>Please, fill out the form. A thumbnail image is not required.</p>\n  </div>\n  <div class=\"submitArea formContainer\">\n    <form #f=\"ngForm\" (ngSubmit)=\"createPost()\" id=\"submitForm\" class=\"submitForm\">\n      <label>Link URL:</label>\n      <input required name=\"url\" ngModel type=\"text\" />\n      <label>Link Title:</label>\n      <input required name=\"title\" ngModel type=\"text\" />\n      <label>Link Thumbnail Image (optional):</label>\n      <input required name=\"imageURL\" ngModel type=\"text\" />\n      <label>Description (optional):</label>\n      <textarea name=\"description\" ngModel></textarea>\n      <input id=\"btnSubmitPost\" [disabled]=\"f.invalid\" value=\"Submit\" type=\"submit\">\n    </form>\n  </div>\n</section>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CommentInfo } from '../../shared/models/comment-info';\nimport { PostInfo } from '../../shared/models/post-info';\nimport { Observable } from 'rxjs';\nimport { getCommentAll, getCommentErrorMessage, getPostErrorMessage } from '../../../+store';\nimport { IAppState } from '../../../+store';\nimport { Store } from '@ngrx/store';\nimport * as PostsActions from '../../../+store/posts/actions';\nimport * as CommentsActions from '../../../+store/comments/actions';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-post-details',\n  templateUrl: './post-details.component.html',\n  styleUrls: ['./post-details.component.css']\n})\nexport class PostDetailsComponent implements OnInit, OnDestroy {\n  id: string;\n  post: PostInfo;\n  comments$: Observable<CommentInfo[]>;\n  commentErrorMsg$: Observable<any>;\n\n  constructor(\n    private store: Store<IAppState>,\n    private route: ActivatedRoute,\n    private toastr: ToastrService\n  ) { this.commentErrorMsg$ = this.store.select(getCommentErrorMessage); }\n\n  ngOnInit() {\n    this.id = this.route.snapshot.params.id;\n    this.post = this.route.snapshot.data.post;\n    this.store.dispatch(CommentsActions.getAllComments({ id: this.id }));\n    this.comments$ = this.store.select(getCommentAll);\n    this.commentErrorMsg$.subscribe((message) => this.showToasterMsg(message));\n  }\n\n  showToasterMsg(errMsg) {\n    if (errMsg) { this.toastr.error(errMsg, 'Error!'); }\n  }\n\n  loadComments() {\n    this.store.dispatch(CommentsActions.getAllComments({ id: this.id }));\n    this.comments$ = this.store.select(getCommentAll);\n  }\n\n  postComment(body) {\n    this.store.dispatch(CommentsActions.createComment({ body }));\n    this.loadComments();\n  }\n\n  deleteComment(id: string) {\n    this.store.dispatch(CommentsActions.deleteComment({ id }));\n    this.loadComments();\n  }\n\n  deletePost(id: string) {\n    this.store.dispatch(PostsActions.deletePost({ id }));\n  }\n\n  ngOnDestroy() {\n    this.store.dispatch(PostsActions.getPostByIdCansel());\n  }\n}\n\n","<section id=\"viewComments\">\n  <app-post-info\n    [post]=\"post\"\n    [desc]=\"post.description\"\n    (deletePostEmitter)=\"deletePost($event)\">\n  </app-post-info>\n  <div class=\"post post-content\">\n    <app-comment-create\n      [postId]=\"post._id\"\n      (postCommentEmitter)=\"postComment($event)\">\n    </app-comment-create>\n  </div>\n  <app-comment-info\n    *ngFor=\"let commentInfo of (comments$ | async)\"\n    [commentInfo]=\"commentInfo\"\n    (deleteCommentEmitter)=\"deleteComment($event)\">\n  </app-comment-info>\n</section>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { PostInfo } from '../../shared/models/post-info';\nimport { PostService } from '../../../core/services/post.service';\nimport { Store } from '@ngrx/store';\nimport { getAuthUsername, getPostErrorMessage, IAppState } from '../../../+store';\nimport * as PostsActions from '../../../+store/posts/actions';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-post-edit',\n  templateUrl: './post-edit.component.html',\n  styleUrls: ['./post-edit.component.css']\n})\nexport class PostEditComponent implements OnInit {\n  @ViewChild('f') editPostForm: NgForm;\n  post: PostInfo;\n  // post$: Observable<PostInfo>;\n\n  constructor(\n    private store: Store<IAppState>,\n    private route: ActivatedRoute,\n    private postService: PostService,\n    private toastr: ToastrService\n  ) { }\n\n  ngOnInit() {\n    const id = this.route.snapshot.params.id;\n    this.store.dispatch(PostsActions.getPostById({id}));\n    // this.post$ = this.store.select(getByIdPost);\n    this.postService.getById(id).subscribe(data => {\n      this.post = data;\n    });\n  }\n\n  editPost() {\n    const id = this.route.snapshot.params.id;\n    const body = this.editPostForm.value;\n    this.store.select(getAuthUsername).subscribe((username) => {\n      body.author = username;\n    });\n    this.store.dispatch(PostsActions.editPost({ body, id }));\n    // body.author = localStorage.getItem('username');\n    // this.store.select(getPostErrorMessage).subscribe((error) => {\n    //   if (error) { return this.toastr.error(error, 'Error!'); }\n    // });\n  }\n}\n\n","<section id=\"viewEdit\">\n  <div class=\"submitArea\">\n    <h1>Edit Link</h1>\n    <p>Please, fill out the form. A thumbnail image/description is not required.</p>\n  </div>\n  <div class=\"submitArea formContainer\">\n    <ng-template [ngIf]=\"post\")>\n      <form #f=\"ngForm\" (ngSubmit)=\"editPost()\" id=\"editPostForm\" class=\"submitForm\">\n        <label>Link URL:</label>\n        <input required [(ngModel)]=\"post.url\" name=\"url\" type=\"text\" />\n        <label>Link Title:</label>\n        <input required [(ngModel)]=\"post.title\" name=\"title\" type=\"text\" value=\"{{post.title}}\" />\n        <label>Link Thumbnail Image (optional):</label>\n        <input required [(ngModel)]=\"post.imageURL\" name=\"imageUrl\" type=\"text\" />\n        <label>Description (optional):</label>\n        <textarea required [(ngModel)]=\"post.description\" name=\"description\"></textarea>\n        <input id=\"btnEditPost\" [disabled]=\"f.invalid\" type=\"submit\" value=\"Edit Post\">\n      </form>\n    </ng-template>\n  </div>\n</section>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { PostInfo } from '../../shared/models/post-info';\nimport { Store } from '@ngrx/store';\nimport { IAppState } from '../../../+store';\nimport { getAuthUserId } from '../../../+store';\n// import * as PostsActions from '../../../+store/posts/actions';\n\n@Component({\n  selector: 'app-post-info',\n  templateUrl: './post-info.component.html',\n  styleUrls: ['./post-info.component.css']\n})\nexport class PostInfoComponent {\n  @Input() post: PostInfo;\n  @Input() rank: number;\n  @Input() desc: string;\n  @Output() deletePostEmitter = new EventEmitter<string>();\n  userId: string;\n\n  constructor(private store: Store<IAppState>) { }\n\n  isAuthor(post: PostInfo) {\n    this.store.select(getAuthUserId).subscribe((id) => this.userId = id);\n    // return post.author === localStorage.getItem('username');\n    return post.creatorPostId === this.userId;\n  }\n\n  deletePost(id: string) {\n    this.deletePostEmitter.emit(id);\n    // this.store.dispatch(PostsActions.deletePost({ id }));\n  }\n}\n\n","<article class=\"post\">\n  <div *ngIf=\"rank\" class=\"col rank\">\n    <span>{{rank}}</span>\n  </div>\n  <div class=\"col thumbnail\">\n    <a href=\"{{post['url']}}\">\n      <img src=\"{{post['imgURL']}}\">\n    </a>\n  </div>\n  <div class=\"post-content\">\n    <div class=\"title\">\n      <a href=\"{{post['url']}}\">\n        {{post['title']}}\n      </a>\n    </div>\n    <div class=\"details\">\n      <p *ngIf=\"desc\">{{post['description']}}</p>\n      <div class=\"info\">\n        submitted by {{post?.author}}\n      </div>\n      <div class=\"controls\">\n        <ul>\n          <li class=\"action\"><a [routerLink]=\"[ '/posts/details', post['_id'] ]\" class=\"commentsLink\">comments</a></li>\n          <ng-template [ngIf]=\"isAuthor(post)\">\n            <li class=\"action\"><a [routerLink]=\"[ '/posts/edit', post['_id'] ]\" href=\"#\">edit</a></li>\n            <li class=\"action\"><button (click)=\"deletePost(post['_id'])\">delete</button></li>\n          </ng-template>\n        </ul>\n      </div>\n    </div>\n  </div>\n</article>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, UrlSegment } from '@angular/router';\nimport { PostService } from '../../../core/services/post.service';\nimport { PostInfo } from '../../shared/models/post-info';\nimport { Observable } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport * as PostsActions from '../../../+store/posts/actions';\nimport { getPostAll, getPostsUser, IAppState } from '../../../+store';\n\n@Component({\n  selector: 'app-post-list',\n  templateUrl: './post-list.component.html',\n  styleUrls: ['./post-list.component.css']\n})\nexport class PostListComponent implements OnInit, OnDestroy {\n  allPosts$: Observable<PostInfo[]>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private postService: PostService,\n    private store: Store<IAppState>\n  ) { }\n\n  ngOnInit() {\n    this.route.url.subscribe((segmentArr: UrlSegment[]) => {\n      const segment = segmentArr[0];\n      if (!segment) {\n        this.store.dispatch(PostsActions.getAllPosts({ }));\n        this.allPosts$ = this.store.select(getPostAll);\n      } else {\n        this.store.dispatch(PostsActions.getUserPosts({ }));\n        this.allPosts$ = this.store.select(getPostsUser);\n      }\n    });\n  }\n\n  deletePost(id: string) {\n    this.store.dispatch(PostsActions.deletePost({ id }));\n    this.store.dispatch(PostsActions.getAllPosts({ }));\n    this.allPosts$ = this.store.select(getPostAll);\n  }\n\n  ngOnDestroy() {\n    this.store.dispatch(PostsActions.getAllPostsCancel());\n  }\n}\n","<section id=\"viewCatalog\">\n  <div class=\"posts\">\n    <app-post-info\n      *ngFor=\"let post of (allPosts$ | async); let i=index;\"\n      [post]=\"post\"\n      [rank]=\"i\"\n      (deletePostEmitter)=\"deletePost($event)\">\n    </app-post-info>\n  </div>\n</section>\n","// Modules\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n// Components\nimport { PostListComponent } from './post-list/post-list.component';\nimport { PostCreateComponent } from './post-create/post-create.component';\nimport { PostEditComponent } from './post-edit/post-edit.component';\nimport { PostDetailsComponent } from './post-details/post-details.component';\n\nimport { SinglePostResolver } from '../../core/resolvers/single-post.resolver';\n\nconst postRoutes: Routes = [\n  { path: '', component: PostListComponent, data: { isLogged: true } },\n  { path: 'user', component: PostListComponent, data: { isLogged: true } },\n  { path: 'create', component: PostCreateComponent, data: { isLogged: true } },\n  { path: 'edit/:id', component: PostEditComponent, data: { isLogged: true } },\n  { path: 'details/:id', component: PostDetailsComponent, data: { isLogged: true }, resolve: { post: SinglePostResolver } }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(postRoutes)],\n  exports: [RouterModule]\n})\nexport class PostRoutingModule { }\n","// Modules\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { PostRoutingModule } from './post-routing.module';\n\n// Components\nimport { PostCreateComponent } from './post-create/post-create.component';\nimport { PostDetailsComponent } from './post-details/post-details.component';\nimport { PostEditComponent } from './post-edit/post-edit.component';\nimport { PostInfoComponent } from './post-info/post-info.component';\nimport { PostListComponent } from './post-list/post-list.component';\nimport { CommentInfoComponent } from '../comment/comment-info/comment-info.component';\nimport { CommentCreateComponent } from '../comment/comment-create/comment-create.component';\n\n\n@NgModule({\n  declarations: [\n    PostCreateComponent,\n    PostDetailsComponent,\n    PostEditComponent,\n    PostInfoComponent,\n    PostListComponent,\n    CommentInfoComponent,\n    CommentCreateComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    PostRoutingModule\n  ],\n  exports: [\n    PostRoutingModule\n  ]\n})\nexport class PostModule { }\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  Resolve,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\nimport { PostInfo } from '../../components/shared/models/post-info';\r\nimport { PostService } from '../services/post.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class SinglePostResolver implements Resolve<PostInfo> {\r\n\r\n  constructor(private postService: PostService) { }\r\n\r\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    const id = route.params.id;\r\n    return this.postService.getById(id);\r\n  }\r\n}\r\n"]}